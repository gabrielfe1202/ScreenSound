@page "/"
@inject ArtistaAPI artistaApi
@inject AuthAPI authAPI
@attribute [AllowAnonymous]

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">
                <p>Voce esta logado como @context.User.Identity.Name </p>
                <MudButton Variant="Variant.Filled" Color="Color.Error"
                           Class="my-6" @onclick="Logout">
                    Logout
                </MudButton>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudPaper Class="px-8 pt-2 pb-4 mx-16 my-8" Justify="Justify.Center">
                <MudForm>
                    <MudTextField T="string" Label="Email" @bind-Value="email"
                                  Variant="Variant.Outlined" Class="my-4"
                                  Required="true" RequiredError="Email obrigatório!"
                                  OnlyValidateIfDirty="true" />

                    <MudTextField T="string" Label="Senha" @bind-Value="senha"
                                  InputType="InputType.Password"
                                  Variant="Variant.Outlined" Class="my-4"
                                  Required="true" RequiredError="Senha obrigatória!"
                                  OnlyValidateIfDirty="true" />

                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               Class="my-6" @onclick="FazerLogin">
                        Login
                    </MudButton>
                </MudForm>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? email;
    private string? senha;

    public async Task FazerLogin()
    {
        await authAPI.LoginAsync(email, senha);
    }

    public async Task Logout()
    {
       await authAPI.LogoutAsync();
    }

}
